User interface (UI) testing is the process used to test whether an application is working properly. UI tests can be run manually by a human tester or automatically using a software program.

Automated Her UI Testing is an automation of manual testing tasks. Manual testing tasks are time-consuming and error-prone, so we implement automated UI testing as a more accurate, efficient, and reliable method. Automated UI testing will become a cost-effective alternative to manual testing over time. However, it should be implemented after some features are ready (e.g. sprint results). Developing them side-by-side with mainstream implementations can create headaches while maintaining new features.

Additionally, automated UI tests can run simultaneously on different platforms and different browsers. However, instances where the UI is distorted are not displayed. The test passes if all DOM elements exist in the document. For obvious reasons, automated UI testing becomes more important when multiple people are working on the same code. Without good automated test coverage, complex pieces of code quickly become he-one-man domain ("Don't touch that code without talking to Ted!").

One of the greatest benefits of automated UI testing is finding regression errors. Their purpose is to ensure that the new code you write doesn't break or change existing functionality. I found the following statement summarizing the whole purpose of automated testing:
"A well-written unit test cannot find bugs... But you can definitely find regressions. ‚Äù

Here is some of my code of UI testing 
import time

from behave import *
from selenium import webdriver
from selenium.webdriver.common.by import By



@given(u'I launch chrome browser')
def step_impl(context):
    context.driver = webdriver.Chrome()


@given(u'google to open metabase website')
def step_impl(context):
    context.driver.get("http://localhost:3000/")


@given(u'I am logged in my metabase account')
def step_impl(context):
    context.driver.find_element(By.XPATH, "//*[@id= \"formField-username\"]/div[2]/div/input").send_keys(
    "aliahmadazhar4420@gmail.com")
    time.sleep(1)
    context.driver.find_element(By.XPATH, "//*[@id=\"formField-password\"]/div[2]/div/input").send_keys("Googlo0324!")
    time.sleep(1)
    context.driver.find_element(By.XPATH, "//*[@id=\"root\"]/div/div/main/div/div[2]/div/div[2]/div/form/div[4]").click()
    time.sleep(1)


@when(u'I click on personal account option')
def step_impl(context):
    context.driver.find_element(By.XPATH, "//*[@id=\"root\"]/div/div/aside/nav/div/div/div[2]/ul/div[2]/div/li/a/div[2]").click()
    time.sleep(1)


@then(u'personal collection page opens')
def step_impl(context):
    check = context.driver.find_element(By.XPATH,"//*[@id=\"root\"]/div/div/main/div/div").is_displayed()
    if check is True:
        assert True
    if check is False:
        assert False

    time.sleep(1)


@when(u'I click on create new button')
def step_impl(context):
    context.driver.find_element(By.XPATH, "//*[@id=\"root\"]/div/div/main/div/div/div[3]/div/div[3]/span[1]/button/div/div").click()
    time.sleep(1)


@then(u'a menu is displayed')
def step_impl(context):
    check = context.driver.find_element(By.XPATH,  "/html/body/span/span/div/div/div/ol").is_displayed()
    if check is True:
        assert True
    time.sleep(1)


@when(u'I click on collection')
def step_impl(context):
    context.driver.find_element(By.XPATH,  "//span[text()='Collection']").click()
    time.sleep(1)


@then(u'a collection box is opened')
def step_impl(context):
    check = context.driver.find_element(By.XPATH, "/html/body/div[6]/div/div/div/div/div/div[2]/div/form").is_displayed()
    if check is True:
        assert True
    time.sleep(1)


@when(u'I enter collection name ""NewDemo""')
def step_impl(context):
    context.driver.find_element(By.XPATH, "//*[@id=\"formField-name\"]/div[2]/div/input").send_keys("NewDemo")
    time.sleep(1)


@when(u'enter description ""this is scenario outline description""')
def step_impl(context):
    context.driver.find_element(By.XPATH, "//*[@id=\"formField-description\"]/div[2]/textarea").send_keys("this is scenario outline description")
    time.sleep(1)


@then(u'create button is "yes" enabled')
def step_impl(context):
    check = context.driver.find_element(By.XPATH, "//*[@id=\"formField-description\"]/div[2]/textarea").is_enabled()
    if check is True:
        assert True
    time.sleep(1)


@then('select location')
def select_location(context):
    context.driver.find_element(By.XPATH, "//*[@id=\"formField-parent_id\"]/div[2]/a/button").click()
    time.sleep(3)


@then(u'click on create button')
def step_impl(context):
    context.driver.find_element(By.XPATH, "/html/body/div[6]/div/div/div/div/div/div[2]/div/form/div[4]/button[1]").click()


@then('new collection page with given name is created')
def page_created(context):
    status = context.driver.find_element(By.XPATH , "//*[@id=\"root\"]/div/div/main"
                                                    "/div/div/div[1]/div[1]/div[1]/div/textarea").is_displayed()
    time.sleep(1)
    if status is True:
        assert True, "Opened"
        # context.driver.close()


